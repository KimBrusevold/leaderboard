@page "/addentry"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using leaderboard.Shared
@using leaderboard.Shared.Createobjects
@using System.Text.RegularExpressions

@inject HttpClient Client
@inject NavigationManager NavManager
@attribute [Authorize]

<div style="width:100%; margin-top: 50px">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h3">Add an entry to the leaderboard</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @bind-IsValid="@success">
                    <MudAutocomplete Required="true"
                        T="Game" Label="Pick or search for Game" 
                        SearchFunc="@SearchGame" ResetValueOnEmptyText="true" CoerceText="true" 
                        CoerceValue="false" ValueChanged="LoadTracks">

                    </MudAutocomplete>
                    <MudAutocomplete Required="true" Disabled="@(selectedGame == null)"
                        T="Track" Label="Pick or search for Track"
                        SearchFunc="@SearchTrack" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="false" ValueChanged="loadVehicles">

                    </MudAutocomplete>
                    <MudAutocomplete Required="true" Disabled="@(selectedGame == null)"
                        T="Vehicle" Label="Pick or search for Vehicle" @bind-Value="selectedVehicle"
                        SearchFunc="@SearchVehicle" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="false">

                    </MudAutocomplete>
                    <MudText class="pa-4 t" Typo="Typo.h4">Time</MudText>
                    <MudGrid>
                        <MudItem xs="6" sm="4" md="2">
                            <MudNumericField Required="true" @bind-Value="minutes" Label="Minutes" Variant="Variant.Outlined" HideSpinButtons="true" Min="0" Max="1000" />
                        </MudItem>
                        <MudItem xs="6" sm="4" md="3">
                            <MudTextField Required="true"
                            Validation="@(new Func<string, string>(validateSecondsString))" @bind-Value="secondsString" Label="seconds.hundreds-thousands" Variant="Variant.Outlined" HelperText="eg: '59' for 59 seconds. '59.123' for 123 thousands, or '59.1' for 1 tenth" />
                        </MudItem>
                    </MudGrid>
            </MudForm>
            @if(string.IsNullOrWhiteSpace(error) is false)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-2">@error</MudAlert>
            }
        </MudCardContent>
        <MudCardActions>
           <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="SubmitTime">Submit Time</MudButton>
        </MudCardActions>
    </MudCard>
    
</div>

@code {
    private Track selectedTrack;
    private Game selectedGame;
    private Vehicle selectedVehicle;
    private int minutes = 0;
    private string secondsString;
    private bool success = false;
    private string error = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    async Task loadVehicles(Track arg)
    {
        if(arg == null)
            return;
        
        var vehicles = await Client.GetFromJsonAsync<IEnumerable<Vehicle>>($"api/vehicle?gameId={selectedGame.Id}");
        selectedGame.Vehicles = vehicles.ToList();
        selectedTrack = arg;
    }
    async Task LoadTracks(Game arg)
    {
        if(arg is null)
        {
            return;
        }

        var tracks =  await Client.GetFromJsonAsync<IEnumerable<Track>>($"api/track?gameId={arg.Id}");
        selectedGame = arg;
        selectedGame.Tracks = tracks.ToList();
    }
    
    private async Task<IEnumerable<Game>> SearchGame(string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return await Client.GetFromJsonAsync<IEnumerable<Game>>($"api/game");

        searchString = searchString.ToLower();

        return await Client.GetFromJsonAsync<IEnumerable<Game>>($"api/game?name={searchString}");
        
    }
    private async Task<IEnumerable<Track>> SearchTrack(string searchString)
    {
        if (selectedGame is null)
            return new List<Track>();
        if (string.IsNullOrWhiteSpace(searchString))
            return selectedGame.Tracks.Take(10);



        return selectedGame.Tracks.Where(track => track.Name.ToLower().Contains(searchString.ToLower())).Take(10);
        
    }
    private async Task<IEnumerable<Vehicle>> SearchVehicle(string searchString)
    {
        if (selectedGame is null)
            return new List<Vehicle>();
        if (string.IsNullOrWhiteSpace(searchString))
            return selectedGame.Vehicles;

        return selectedGame.Vehicles.Where(vehicle => vehicle.Name.ToLower().Contains(searchString.ToLower()));
    }

    private async Task SubmitTime()
    {
        if (selectedGame is null
        || selectedTrack is null
        || selectedVehicle is null
        || (minutes == 0 && string.IsNullOrWhiteSpace(secondsString)))
            return;


        var authstate = await authenticationStateTask;
        var userpPrins = authstate?.User;

        if(userpPrins is null)
        {
            System.Console.WriteLine("User isn not authenticated");
            return;
        }

        var idClaim = userpPrins.Claims.Where(claim => claim.Type == "DiscordId").FirstOrDefault();
        var nameClaim = userpPrins.Claims.Where(claim => claim.Type == ClaimTypes.Name).FirstOrDefault();

        if(idClaim == default(Claim) || nameClaim == default(Claim))
            return;
        
        User user = new()
        {
            DiscrodId = idClaim.Value,
            Name = nameClaim.Value
        };

        double seconds = double.Parse(secondsString);

        seconds = seconds + minutes*60;
        var time = TimeSpan.FromSeconds(seconds);
        
        Entry entry = new()
            {
                Game = selectedGame,
                Track = selectedTrack,
                Vehicle= selectedVehicle,
                User = user,
                Time = time
            };
        try
        {
            var r = await Client.PostAsJsonAsync("api/entry", entry);            
            if(r.IsSuccessStatusCode is false)
            {
                if(r.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    error = "Something went wrong. Try to log out and in again";
                    return;
                }

                var message = await  r.Content.ReadAsStringAsync();
                throw new Exception(message);

            }
            error = "";

            NavManager.NavigateTo("/");
        }
        catch (System.Exception e)
        {
            error = "Something went wrong trying to create entry. Try again later.";
            System.Console.WriteLine("Error when creating entry: \n " + e.Message);
        }
    }

    private string validateSecondsString(string args)
    {
        if(string.IsNullOrWhiteSpace(args) || args.Length > 6 || args.Length == 0)
            return "Seconds must be on format 'ss' or 'ss.ths'";

        var reg = new Regex("^([0-9]{1,2}){1}([.][0-9]{1,3})?$");
        var match = reg.Match(args);

        if(match.Success is false)
            return "Seconds must be on format 'ss' or 'ss.ths'";

        if(double.TryParse(args, out double res) is false)
        {
            return "is input format 'ss' or 'ss.ths'? max value for thousands is 999";
        }
        if(res > 59.999)
            return "Seconds part cannot be greater than 59.999. Use minutes";
            
        return null;
    }
}
