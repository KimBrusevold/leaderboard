@page "/addentry"
@using Microsoft.AspNetCore.Authorization
@using leaderboard.Shared

@inject HttpClient Client
@attribute [Authorize]

<div style="width:100%; margin-top: 50px">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h3">Add an entry to the leaderboard</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm>
                    <MudAutocomplete 
                        T="Game" Label="Pick or search for Game" @bind-Value="selectedGame"
                        SearchFunc="@SeachGame" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="false">

                    </MudAutocomplete>
                    <MudAutocomplete Disabled="@(selectedGame == null)"
                        T="Track" Label="Pick or search for Game" @bind-Value="selectedTrack"
                        SearchFunc="@SeachTrack" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="false">

                    </MudAutocomplete>
            </MudForm>
        </MudCardContent>
        
    </MudCard>
    
</div>

@code {
    private IEnumerable<Game> games;
    private Track selectedTrack;
    private Game selectedGame;

    private bool isLoading = true;

    //protected override async Task OnInitializedAsync()
    //{
    //    games  = await Client.GetFromJsonAsync<IEnumerable<Game>>("api/game");

    //    isLoading = false;
    //}

    private async Task<IEnumerable<Game>> SeachGame(string searchString)
    {
        if(games is null)
            games = await Client.GetFromJsonAsync<IEnumerable<Game>>($"api/game");
        if (string.IsNullOrWhiteSpace(searchString))
            return games;

        searchString = searchString.ToLower();

        Console.WriteLine("Got: " + games.Count());
        if (games is null)
            return new List<Game>();


        var matched = games.Where(game => game.Name.ToLower().Contains(searchString));
        Console.WriteLine("Matches: " + matched.Count());

        return matched; 
    }
    private async Task<IEnumerable<Track>> SeachTrack(string searchString)
    {
        if (selectedGame is null)
            return new List<Track>();
        if (string.IsNullOrWhiteSpace(searchString))
            return selectedGame.Tracks;

        return selectedGame.Tracks.Where(track => track.Name.ToLower().Contains(searchString.ToLower()));
    }
}
