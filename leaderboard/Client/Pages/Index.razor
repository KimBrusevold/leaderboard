@page "/"
@using leaderboard.Shared
@using Microsoft.AspNetCore.Authorization
@using leaderboard.Shared.RetrieveObjects
@using System.Diagnostics

@inject HttpClient Client

<AuthorizeView>
	<MudButton Color="Color.Primary" Link="/addentry">Add an entry.</MudButton>
</AuthorizeView>
<MudText class="pt-4" Typo="Typo.h2">Leaderboard For iRacing</MudText>

@if(tracks is not null){
<MudText Typo="Typo.body1">Search for a track to see entries</MudText>
<MudGrid>
	<MudItem xs="12" sm="6" md="4">
		<MudAutocomplete T="Track" Label="Pick or search for Track" ValueChanged="GetEntries" SearchFunc="@SearchTrack"
			ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="false">
		</MudAutocomplete>
	</MudItem>
	<MudItem xs="12" sm="6" md="4">
		@if(track is not null){
		<MudSelect T="string" Label="Categories" AnchorOrigin="Origin.BottomCenter">
			@foreach (var category in categories)
			{
				<MudSelectItem Value="@category.Name" />
			}
		</MudSelect>
		}
	</MudItem>
</MudGrid>
}else{
	<MudProgressCircular Color="Color.Info" Indeterminate="true" />
}
<MudTable Items="entries" Hover="true">
	<HeaderContent>
		<MudTh>Nr</MudTh>
		<MudTh>
			<div>
				Car
			</div>
		</MudTh>
		<MudTh>Time</MudTh>
		<MudTh>Name</MudTh>
		<MudTh>Diff</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTh>@if(context.Rank == 1){
				<img width="30px" height="30px" src="img/first.png"/>
			}else if(context.Rank == 2){
				<img width="30px" height="30px" src="img/second.png"/>
			}else if(context.Rank == 3){
				<img width=30px height=30px src="img/third.png"/>
			}else{
				@context.Rank
			}
		</MudTh>
		<MudTh>@context.Vehicle.Name</MudTh>
		<MudTh>@($"{context.Time.Minutes}:{context.Time.Seconds}:{context.Time.Milliseconds}")</MudTh>
		<MudTh>@context.User.UserName</MudTh>
		<MudTh>@if(context.Rank != 1){<MudChip Color="Color.Error">@GetDiff(context)</MudChip>}</MudTh>
	</RowTemplate>
</MudTable>


@code {
	private const string gameId = "61e336818a3f02e94b0731c1";
	IEnumerable<Entry> entries;
	TimeSpan fastest;
	IEnumerable<Track> tracks;
	Track track;
	IEnumerable<Category> categories;
	bool searcherd = false;

	protected override async Task OnInitializedAsync()
    {
		tracks = await Client.GetFromJsonAsync<IEnumerable<Track>>($"api/track?gameId={gameId}");
		categories = await Client.GetFromJsonAsync<IEnumerable<Category>>($"api/category");

		Console.WriteLine("Number of categories: " + categories.Count());
    }
	private string GetDiff(Entry entry)
	{

		var diff = entry.Time - fastest;

		if (diff.TotalSeconds == 0)
			return "string.Empty";

		return $"+{diff.TotalSeconds}";
	}
	async Task<IEnumerable<Track>> SearchTrack(string searchString)
	{

		if (tracks == null)
		{
			System.Console.WriteLine("No tracks. Error");
			return new List<Track>();
		}
		IEnumerable<Track> result;
		if (string.IsNullOrWhiteSpace(searchString))
			result = tracks;
		else
			result = tracks.Where(track => track.Name.Contains(searchString, StringComparison.CurrentCultureIgnoreCase));

		if(result == null || result.Any() is false)
			new List<Track>();

		return result.Take(5);
	}

	private async Task GetEntries(Track? track)
	{
		if (track == null)
		{
			entries = null;
			fastest = TimeSpan.MinValue;
			return;
		}

		var gottenEnt = await Client.GetFromJsonAsync<IEnumerable<Entry>>($"api/entry?gameId={gameId}&trackId={track.Id}");

		if (gottenEnt == null || gottenEnt.Count() == 0)
		{
			entries = null;
			fastest = TimeSpan.MinValue;
			return;
		}

		fastest = gottenEnt.First().Time;
		entries = gottenEnt;

	}

}