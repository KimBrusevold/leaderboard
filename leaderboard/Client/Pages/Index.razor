@page "/"
@using leaderboard.Shared
@using Microsoft.AspNetCore.Authorization
@using leaderboard.Shared.RetrieveObjects
@inject HttpClient Client

<AuthorizeView>
	<MudButton Color="Color.Primary" Link="/addentry">Add an entry.</MudButton>
</AuthorizeView>

<MudGrid>
	<MudItem xs="12" sm="6" md="4">
		<MudAutocomplete T="Track" Label="Pick or search for Track" ValueChanged="GetEntries" SearchFunc="@SearchTrack"
			ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="false">
		</MudAutocomplete>
	</MudItem>
</MudGrid>

	<MudTable Items="entries" Hover="true">
	<HeaderContent>
		<MudTh>Nr</MudTh>
		<MudTh>Car</MudTh>
		<MudTh>Time</MudTh>
		<MudTh>Name</MudTh>
		<MudTh>Diff</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTh>@context.Rank</MudTh>
		<MudTh>@context.Vehicle.Name</MudTh>
		<MudTh>@($"{context.Time.Minutes}:{context.Time.Seconds}:{context.Time.Milliseconds}")</MudTh>
		<MudTh>@context.User.UserName</MudTh>
		<MudTh HideSmall="true">@GetDiff(context)</MudTh>
	</RowTemplate>
</MudTable>


@code {
	private const string gameId = "61e336818a3f02e94b0731c1";
	IEnumerable<Entry> entries;
	TimeSpan fastest;
	IEnumerable<Track> tracks;
	Track track;
	bool searcherd = false;

	private string GetDiff(Entry entry)
	{

		var diff = fastest - entry.Time;

		if (diff.TotalSeconds == 0)
			return string.Empty;

		return $"{diff.TotalSeconds}";
	}
	async Task<IEnumerable<Track>> SearchTrack(string searchString)
	{
		if (tracks == null)
		{
			tracks = await Client.GetFromJsonAsync<IEnumerable<Track>>($"api/track?gameId={gameId}");
		}

		if (string.IsNullOrWhiteSpace(searchString))
			return tracks;

		return tracks.Where(track => track.Name.Contains(searchString, StringComparison.CurrentCultureIgnoreCase));
	}

	private async Task GetEntries(Track? track)
	{
		if (track == null)
		{
			entries = null;
			fastest = TimeSpan.MinValue;
			return;
		}

		var gottenEnt = await Client.GetFromJsonAsync<IEnumerable<Entry>>($"api/entry?gameId={gameId}&trackId={track.Id}");

		if (gottenEnt == null || gottenEnt.Count() == 0)
		{
			entries = null;
			fastest = TimeSpan.MinValue;
			return;
		}

		fastest = gottenEnt.First().Time;
		entries = gottenEnt;

	}

}